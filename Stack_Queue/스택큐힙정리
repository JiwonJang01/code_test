/*
Stack
- 후입 선출
*/
import java.util.Stack;

public class StackExample {
    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();

        // 데이터 추가 (push)
        stack.push(1);
        stack.push(2);
        stack.push(3);

        System.out.println("Stack: " + stack); // [1, 2, 3]

        // 데이터 제거 (pop)
        System.out.println("pop: " + stack.pop()); // 3
        System.out.println("Stack after pop: " + stack); // [1, 2]

        // 맨 위 요소 확인 (peek)
        System.out.println("peek: " + stack.peek()); // 2
    }
}

/*
DFS
*/
import java.util.*;

public class DFSExample {
    public static void main(String[] args) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        graph.put(1, Arrays.asList(2, 3));
        graph.put(2, Arrays.asList(4, 5));
        graph.put(3, Arrays.asList(6));
        graph.put(4, Arrays.asList());
        graph.put(5, Arrays.asList());
        graph.put(6, Arrays.asList());

        dfs(1, graph);
    }

    public static void dfs(int start, Map<Integer, List<Integer>> graph) {
        Stack<Integer> stack = new Stack<>();
        Set<Integer> visited = new HashSet<>();

        stack.push(start);

        while (!stack.isEmpty()) {
            int node = stack.pop();

            if (!visited.contains(node)) {
                visited.add(node);
                System.out.print(node + " "); // 방문 순서 출력

                // 스택은 후입선출이므로, 방문할 노드를 역순으로 넣음
                List<Integer> neighbors = graph.get(node);
                Collections.reverse(neighbors);
                for (int next : neighbors) {
                    stack.push(next);
                }
            }
        }
    }
}



/*
Queue
- 선입 선출
*/
import java.util.LinkedList;
import java.util.Queue;

public class QueueExample {
    public static void main(String[] args) {
        Queue<Integer> queue = new LinkedList<>();

        // 데이터 추가 (offer)
        queue.offer(1);
        queue.offer(2);
        queue.offer(3);

        System.out.println("Queue: " + queue); // [1, 2, 3]

        // 데이터 제거 (poll)
        System.out.println("poll: " + queue.poll()); // 1
        System.out.println("Queue after poll: " + queue); // [2, 3]

        // 맨 앞 요소 확인 (peek)
        System.out.println("peek: " + queue.peek()); // 2
    }
}

/*
BFS
*/
import java.util.*;

public class BFSExample {
    public static void main(String[] args) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        graph.put(1, Arrays.asList(2, 3));
        graph.put(2, Arrays.asList(4, 5));
        graph.put(3, Arrays.asList(6));
        graph.put(4, Arrays.asList());
        graph.put(5, Arrays.asList());
        graph.put(6, Arrays.asList());

        bfs(1, graph);
    }

    public static void bfs(int start, Map<Integer, List<Integer>> graph) {
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();

        queue.offer(start);
        visited.add(start);

        while (!queue.isEmpty()) {
            int node = queue.poll();
            System.out.print(node + " "); // 방문 순서 출력

            for (int next : graph.get(node)) {
                if (!visited.contains(next)) {
                    queue.offer(next);
                    visited.add(next);
                }
            }
        }
    }
}



/*
Heap
- 완전 이진 트리 기반의 자료구조
- 우선 순위 Queue로 많이 사용
- 최소 힙: 루트가 가장 작은 값
- 최대 힙: 루트가 가장 큰 값
*/
import java.util.PriorityQueue;

public class HeapExample {
    public static void main(String[] args) {
        // 최소 힙 (기본)
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();

        // 데이터 추가
        minHeap.offer(3);
        minHeap.offer(1);
        minHeap.offer(2);

        System.out.println("Min Heap: " + minHeap); // 내부 구조는 다를 수 있음

        // 최솟값 제거
        System.out.println("poll: " + minHeap.poll()); // 1
        System.out.println("Min Heap after poll: " + minHeap); // [2, 3]

        // 최대 힙 (내림차순 정렬)
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> b - a);
        maxHeap.offer(3);
        maxHeap.offer(1);
        maxHeap.offer(2);

        System.out.println("Max Heap: " + maxHeap);
        System.out.println("poll: " + maxHeap.poll()); // 3
        System.out.println("Max Heap after poll: " + maxHeap); // [2, 1]
    }
}

/*
K번째 최댓값 찾기
*/
import java.util.PriorityQueue;

public class KthLargest {
    public static int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        
        for (int num : nums) {
            minHeap.offer(num); // add와 마찬가지. 다만, 실패 시 false반환
            if (minHeap.size() > k) {
                minHeap.poll(); // 가장 작은 값 제거
            }
        }
        return minHeap.peek();
    }

    public static void main(String[] args) {
        int[] nums = {3, 2, 1, 5, 6, 4};
        int k = 2;
        System.out.println(findKthLargest(nums, k)); // 5
    }
}

